// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: GrpcService.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SnaplinkGrpc_Empty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SnaplinkGrpc_Matrix {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rows: UInt32 = 0

  var cols: UInt32 = 0

  var data: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SnaplinkGrpc_CameraModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fx: Float = 0

  var fy: Float = 0

  var cx: Float = 0

  var cy: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SnaplinkGrpc_Label {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dbID: UInt32 = 0

  /// 3D point x
  var x: Float = 0

  /// 3D point y
  var y: Float = 0

  /// 3D point z
  var z: Float = 0

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SnaplinkGrpc_Labels {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var labels: [SnaplinkGrpc_Label] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// an identified item, for test purpose only
struct SnaplinkGrpc_Item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  /// 2D pixel x
  var x: Float = 0

  /// 2D pixel y
  var y: Float = 0

  var size: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SnaplinkGrpc_LocalizationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: UInt64 {
    get {return _storage._requestID}
    set {_uniqueStorage()._requestID = newValue}
  }

  /// JPEG bytes
  var image: Data {
    get {return _storage._image}
    set {_uniqueStorage()._image = newValue}
  }

  /// JPEG EXIF orientation
  var orientation: UInt32 {
    get {return _storage._orientation}
    set {_uniqueStorage()._orientation = newValue}
  }

  var camera: SnaplinkGrpc_CameraModel {
    get {return _storage._camera ?? SnaplinkGrpc_CameraModel()}
    set {_uniqueStorage()._camera = newValue}
  }
  /// Returns true if `camera` has been explicitly set.
  var hasCamera: Bool {return _storage._camera != nil}
  /// Clears the value of `camera`. Subsequent reads from it will return its default value.
  mutating func clearCamera() {_storage._camera = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SnaplinkGrpc_LocalizationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: UInt64 {
    get {return _storage._requestID}
    set {_uniqueStorage()._requestID = newValue}
  }

  var success: Bool {
    get {return _storage._success}
    set {_uniqueStorage()._success = newValue}
  }

  var dbID: UInt32 {
    get {return _storage._dbID}
    set {_uniqueStorage()._dbID = newValue}
  }

  var pose: SnaplinkGrpc_Matrix {
    get {return _storage._pose ?? SnaplinkGrpc_Matrix()}
    set {_uniqueStorage()._pose = newValue}
  }
  /// Returns true if `pose` has been explicitly set.
  var hasPose: Bool {return _storage._pose != nil}
  /// Clears the value of `pose`. Subsequent reads from it will return its default value.
  mutating func clearPose() {_storage._pose = nil}

  /// for test purpose only
  var items: [SnaplinkGrpc_Item] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  var width: UInt32 {
    get {return _storage._width}
    set {_uniqueStorage()._width = newValue}
  }

  var height: UInt32 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var angle: UInt32 {
    get {return _storage._angle}
    set {_uniqueStorage()._angle = newValue}
  }

  var width0: Double {
    get {return _storage._width0}
    set {_uniqueStorage()._width0 = newValue}
  }

  var height0: Double {
    get {return _storage._height0}
    set {_uniqueStorage()._height0 = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SnaplinkGrpc_GetLabelsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var labelsMap: Dictionary<UInt32,SnaplinkGrpc_Labels> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "snaplink_grpc"

extension SnaplinkGrpc_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Empty"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_Empty) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_Matrix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Matrix"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rows"),
    2: .same(proto: "cols"),
    3: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.rows)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.cols)
      case 3: try decoder.decodeRepeatedFloatField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rows != 0 {
      try visitor.visitSingularUInt32Field(value: self.rows, fieldNumber: 1)
    }
    if self.cols != 0 {
      try visitor.visitSingularUInt32Field(value: self.cols, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitPackedFloatField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_Matrix) -> Bool {
    if self.rows != other.rows {return false}
    if self.cols != other.cols {return false}
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_CameraModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CameraModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fx"),
    2: .same(proto: "fy"),
    3: .same(proto: "cx"),
    4: .same(proto: "cy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.fx)
      case 2: try decoder.decodeSingularFloatField(value: &self.fy)
      case 3: try decoder.decodeSingularFloatField(value: &self.cx)
      case 4: try decoder.decodeSingularFloatField(value: &self.cy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fx != 0 {
      try visitor.visitSingularFloatField(value: self.fx, fieldNumber: 1)
    }
    if self.fy != 0 {
      try visitor.visitSingularFloatField(value: self.fy, fieldNumber: 2)
    }
    if self.cx != 0 {
      try visitor.visitSingularFloatField(value: self.cx, fieldNumber: 3)
    }
    if self.cy != 0 {
      try visitor.visitSingularFloatField(value: self.cy, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_CameraModel) -> Bool {
    if self.fx != other.fx {return false}
    if self.fy != other.fy {return false}
    if self.cx != other.cx {return false}
    if self.cy != other.cy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_Label: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Label"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "db_id"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
    4: .same(proto: "z"),
    5: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.dbID)
      case 2: try decoder.decodeSingularFloatField(value: &self.x)
      case 3: try decoder.decodeSingularFloatField(value: &self.y)
      case 4: try decoder.decodeSingularFloatField(value: &self.z)
      case 5: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dbID != 0 {
      try visitor.visitSingularUInt32Field(value: self.dbID, fieldNumber: 1)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 3)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_Label) -> Bool {
    if self.dbID != other.dbID {return false}
    if self.x != other.x {return false}
    if self.y != other.y {return false}
    if self.z != other.z {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_Labels: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Labels"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "labels"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.labels)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.labels, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_Labels) -> Bool {
    if self.labels != other.labels {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Item"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
    4: .same(proto: "size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularFloatField(value: &self.x)
      case 3: try decoder.decodeSingularFloatField(value: &self.y)
      case 4: try decoder.decodeSingularFloatField(value: &self.size)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularFloatField(value: self.size, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_Item) -> Bool {
    if self.name != other.name {return false}
    if self.x != other.x {return false}
    if self.y != other.y {return false}
    if self.size != other.size {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_LocalizationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocalizationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "image"),
    3: .same(proto: "orientation"),
    4: .same(proto: "camera"),
  ]

  fileprivate class _StorageClass {
    var _requestID: UInt64 = 0
    var _image: Data = SwiftProtobuf.Internal.emptyData
    var _orientation: UInt32 = 0
    var _camera: SnaplinkGrpc_CameraModel? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _requestID = source._requestID
      _image = source._image
      _orientation = source._orientation
      _camera = source._camera
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._requestID)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._image)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._orientation)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._camera)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._requestID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._requestID, fieldNumber: 1)
      }
      if !_storage._image.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._image, fieldNumber: 2)
      }
      if _storage._orientation != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._orientation, fieldNumber: 3)
      }
      if let v = _storage._camera {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_LocalizationRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._requestID != other_storage._requestID {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._orientation != other_storage._orientation {return false}
        if _storage._camera != other_storage._camera {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_LocalizationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocalizationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "success"),
    3: .standard(proto: "db_id"),
    4: .same(proto: "pose"),
    5: .same(proto: "items"),
    6: .same(proto: "width"),
    7: .same(proto: "height"),
    8: .same(proto: "angle"),
    9: .same(proto: "width0"),
    10: .same(proto: "height0"),
  ]

  fileprivate class _StorageClass {
    var _requestID: UInt64 = 0
    var _success: Bool = false
    var _dbID: UInt32 = 0
    var _pose: SnaplinkGrpc_Matrix? = nil
    var _items: [SnaplinkGrpc_Item] = []
    var _width: UInt32 = 0
    var _height: UInt32 = 0
    var _angle: UInt32 = 0
    var _width0: Double = 0
    var _height0: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _requestID = source._requestID
      _success = source._success
      _dbID = source._dbID
      _pose = source._pose
      _items = source._items
      _width = source._width
      _height = source._height
      _angle = source._angle
      _width0 = source._width0
      _height0 = source._height0
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._requestID)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._success)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._dbID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._pose)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._width)
        case 7: try decoder.decodeSingularUInt32Field(value: &_storage._height)
        case 8: try decoder.decodeSingularUInt32Field(value: &_storage._angle)
        case 9: try decoder.decodeSingularDoubleField(value: &_storage._width0)
        case 10: try decoder.decodeSingularDoubleField(value: &_storage._height0)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._requestID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._requestID, fieldNumber: 1)
      }
      if _storage._success != false {
        try visitor.visitSingularBoolField(value: _storage._success, fieldNumber: 2)
      }
      if _storage._dbID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._dbID, fieldNumber: 3)
      }
      if let v = _storage._pose {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 5)
      }
      if _storage._width != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._width, fieldNumber: 6)
      }
      if _storage._height != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._height, fieldNumber: 7)
      }
      if _storage._angle != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._angle, fieldNumber: 8)
      }
      if _storage._width0 != 0 {
        try visitor.visitSingularDoubleField(value: _storage._width0, fieldNumber: 9)
      }
      if _storage._height0 != 0 {
        try visitor.visitSingularDoubleField(value: _storage._height0, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_LocalizationResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._requestID != other_storage._requestID {return false}
        if _storage._success != other_storage._success {return false}
        if _storage._dbID != other_storage._dbID {return false}
        if _storage._pose != other_storage._pose {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._width != other_storage._width {return false}
        if _storage._height != other_storage._height {return false}
        if _storage._angle != other_storage._angle {return false}
        if _storage._width0 != other_storage._width0 {return false}
        if _storage._height0 != other_storage._height0 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SnaplinkGrpc_GetLabelsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetLabelsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "labels_map"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,SnaplinkGrpc_Labels>.self, value: &self.labelsMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labelsMap.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,SnaplinkGrpc_Labels>.self, value: self.labelsMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: SnaplinkGrpc_GetLabelsResponse) -> Bool {
    if self.labelsMap != other.labelsMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
